#获取httpclient:
    gothic.GetHttpClient(name) 如gothic.GetHttpClient(common)

#使用
1. 使用全局默认设置请求
    import github.com/gothinc/gothic

    httpClient := gothic.GetHttpClient("alg_engine")
    respData := ResultStruct{}
    response, err := httpClient.Get(url, nil).ToJson(&respData)
    if err != nil{
        return respData
    }
2. 带设置请求
    import github.com/gothinc/gothic
    import github.com/gothinc/gothic/httpclient

    config := &httpclient.HttpSetting{
        Gzip: false,
        UserAgent: "MyServer",
        Headers: map[string]string{"Content-Type": "application/json"},
        Cookie: Cookie键值对
    }
    httpClient := gothic.GetHttpClient("alg_engine")
    respData := ResultStruct{}
    response, err := httpClient.Get(url, config).ToJson(&respData)
    if err != nil{
        return respData
    }

#http连接池配置
[application.httpclientpool]
    #通用http连接池
    [application.httpclientpool.common]
    #是否加载该client
    disable = false
    max_idle_conn = 100
    #最长空闲时间, 单位s
    idle_conn_timeout = 60
    #http超时时间,单位ms
    http_timeout = 1000
    #tcp连接超时时间, 单位ms
    dial_timeout = 500

    #策略引擎http连接池
    [application.httpclientpool.alg_engine]
    #是否关闭
    disable = false
    max_idle_conn = 150
    #最长空闲时间, 单位s(java引擎设置的长连接最长空闲时间为60s)
    idle_conn_timeout = 50
    #http超时时间,单位ms
    http_timeout = 1500
    #报警时间阈值
    http_alarm_timeout = 100
    #tcp连接超时时间, 单位ms
    dial_timeout = 1000